<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="propertyquery">
  <title>Property Queries</title>
  
  <section>
    <title>Summary</title>
    
    <para>
      Property queries are a convenient way of locating and working with JavaBean properties. They can be
      used with properties exposed via a getter/setter method, or directly with the field of a bean.
    </para>
  </section>
  
  <section>
    <title>Querying for properties</title>
  
    <para>
      To create a property query, use the <literal>PropertyQueries</literal> class (found in the 
      <literal>org.jboss.weld.extensions.util.properties.query</literal> package) to create a new
      <literal>PropertyQuery</literal> instance:
    </para>
    
    <programlisting><![CDATA[
  PropertyQuery<?> query = PropertyQueries.createQuery(Foo.class);]]></programlisting>
  
    <para>
      If you know the type of the property that you are querying for, you can specify it via a type parameter:
    </para>
    
    <programlisting><![CDATA[
  PropertyQuery<String> query = PropertyQueries.<String>createQuery(identityClass);]]></programlisting>

  </section>
  
  
  <section>
    <title>Property Criteria</title>
  
    <para>
      Once you have created the <literal>PropertyQuery</literal> instance, you can add search criteria.  Weld extensions
      provides three built-in criteria types, and it is very easy to add your own.  Criteria is added to a query via the
      <literal>addCriteria()</literal> method.  This method returns an instance of the <literal>PropertyQuery</literal>,
      so multiple <literal>addCriteria()</literal> invocations can be stacked.
    </para>    
    
    <section>
      <title>AnnotatedPropertyCriteria</title>
      
      <para>
        This criteria is used to locate bean properties that are annotated with a certain annotation type. For example, take
        the following class:
      </para>
      
      <programlisting><![CDATA[
  public class Foo {  
    private String accountNumber;
    private @Scrambled String accountPassword;    
    private String accountName;    
  }]]></programlisting>
  
      <para>
        To query for properties of this bean annotated with <literal>@Scrambled</literal>, you can use an 
        <literal>AnnotatedPropertyCriteria</literal>, like so:
      </para>
      
      <programlisting><![CDATA[
  PropertyQuery<String> query = PropertyQueries.<String>createQuery(Foo.class)
    .addCriteria(new AnnotatedPropertyCriteria(Scrambled.class));]]></programlisting>
    
      <para>
        This query matches the <literal>accountPassword</literal> property of the <literal>Foo</literal> bean.
      </para>    
    
    </section>
    
    <section>
      <title>NamedPropertyCriteria</title>
      
      <para>
        This criteria is used to locate a bean property with a particular name. Take the following class:
      </para>
      
      <programlisting><![CDATA[
  public class Foo {
    public String getBar() {
      return "foobar";
    }
  }]]></programlisting>
  
      <para>
        The following query will locate properties with a name of <literal>"bar"</literal>:
      </para>
      
      <programlisting><![CDATA[
  PropertyQuery<String> query = PropertyQueries.<String>createQuery(Foo.class)
    .addCriteria(new NamedPropertyCriteria("bar"));]]></programlisting>
      
    </section>
  
    <section>
      <title>TypedPropertyCriteria</title>
      
      <para>
        This criteria can be used to locate bean properties with a particular type.
      </para>
      
      <programlisting><![CDATA[
  public class Foo {
    private Bar bar;
  }]]></programlisting>

      <para>
        The following query will locate properties with a type of <literal>Bar</literal>:
      </para>
      
      <programlisting><![CDATA[
  PropertyQuery<Bar> query = PropertyQueries.<Bar>createQuery(Foo.class)
    .addCriteria(new TypedPropertyCriteria(Bar.class));]]></programlisting>
      
    </section>
    
    <section>
      <title>Creating a custom property criteria</title>
      
      <para>
        To create your own property criteria, simply implement the <literal>org.jboss.weld.extensions.util.properties.query.PropertyCriteria</literal> interface, which declares the two methods <literal>fieldMatches()</literal> and <literal>methodMatches</literal>.  
        In the following example, our custom criteria implementation can be used to locate whole number properties:
      </para>
      
      <programlisting><![CDATA[
      
  public class WholeNumberPropertyCriteria implements PropertyCriteria {
    public boolean fieldMatches(Field f) {
      return f.getType() == Integer.class || f.getType() == Integer.TYPE.class ||
             f.getType() == Long.class || f.getType() == Long.TYPE.class ||
             f.getType() == BigInteger.class;
    }   

    boolean methodMatches(Method m) {
      return m.getReturnType() == Integer.class || m.getReturnType() == Integer.TYPE.class ||
             m.getReturnType() == Long.class || m.getReturnType() == Long.TYPE.class ||
             m.getReturnType() == BigInteger.class;
    }
  }]]></programlisting>
      
      
    </section>
  
  </section>
  
  <section>
    <title>Fetching the results</title>
    
    <para>
      After creating the <literal>PropertyQuery</literal> and setting the criteria, the query can be executed by invoking
      either the <literal>getResultList()</literal> or <literal>getFirstResult()</literal> methods.  The 
      <literal>getResultList()</literal> method returns a <literal>List</literal> of <literal>Property</literal> objects,
      one for each matching property found that matches all the specified criteria:
    </para>
    
    <programlisting><![CDATA[
List<Property<String>> results = PropertyQueries.<String>createQuery(Foo.class)
  .addCriteria(TypedPropertyCriteria(String.class))
  .getResultList();]]></programlisting>
    
    <para>
      If no matching properties are found, <literal>getResultList()</literal> will return an empty <literal>List</literal>. 
      If you know that the query will return exactly one result, you can use the <literal>getFirstResult()</literal> method
      instead:
    </para>
    
    <programlisting><![CDATA[
Property<String> result = PropertyQueries.<String>createQuery(Foo.class)
  .addCriteria(NamedPropertyCriteria("bar"))
  .getFirstResult();]]></programlisting>
  
    <para>
      If no properties are found, then <literal>getFirstResult()</literal> will return null.  Alternatively, if more than one
      result is found, then <literal>getFirstResult()</literal> will return the first property found.
    </para>
  </section>  
  
  <section>
    <title>Working with properties</title>
    
    <para>
      The <literal>Property</literal> interface declares a number of methods for interacting with bean properties.  You can
      use these methods to read or set the property value, and read the property type information.
    </para>
    
    <table>
      <title>Property methods</title>

      <tgroup cols="3">
        <colspec colnum="1" colwidth="1*" />
        <colspec colnum="2" colwidth="1*" />        
        <colspec colnum="3" colwidth="3*" />

        <thead>
          <row>
            <entry align="center">
              <para>Method</para>
            </entry>
            <entry align="center">
              <para>Return Type</para>
            </entry>            
            <entry align="center">
              <para>Description</para>
            </entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>
              <para>
                <literal>getName()</literal>
              </para>
            </entry>
            <entry>
              <para>
                <literal>java.lang.String</literal>
              </para>
            </entry>            
            <entry>
              <para>
                Returns the name of the property.
              </para>
            </entry>
          </row>         
          
          <row>
            <entry>
              <para>
                <literal>getBaseType()</literal>
              </para>
            </entry>
            <entry>
              <para>
                <literal>java.lang.reflect.Type</literal>
              </para>
            </entry>            
            <entry>
              <para>
                Returns the property type.
              </para>
            </entry>
          </row>   
          
          <row>
            <entry>
              <para>
                <literal>getJavaClass()</literal>
              </para>
            </entry>
            <entry>
              <para>
                <literal>java.lang.Class</literal>
              </para>
            </entry>            
            <entry>
              <para>
                Returns the property class.
              </para>
            </entry>
          </row>    
          
          <row>
            <entry>
              <para>
                <literal>getAnnotatedElement()</literal>
              </para>
            </entry>
            <entry>
              <para>
                <literal>java.lang.reflect.AnnotatedElement</literal>
              </para>
            </entry>            
            <entry>
              <para>
                Returns the annotated element  -either the <literal>Field</literal> or
                <literal>Method</literal> that the property is based on.
              </para>
            </entry>
          </row>
          
          <row>
            <entry>
              <para>
                <literal>getValue()</literal>
              </para>
            </entry>
            <entry>
              <para>
                <literal>V</literal>
              </para>
            </entry>            
            <entry>
              <para>
                Returns the value of the property.
              </para>
            </entry>
          </row>
          
          <row>
            <entry>
              <para>
                <literal>setValue(V value)</literal>
              </para>
            </entry>
            <entry>
              <para>
                <literal>void</literal>
              </para>
            </entry>            
            <entry>
              <para>
                Sets the value of the property.
              </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
    
</chapter>
